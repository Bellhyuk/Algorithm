package practice;
/*
<Problem> - 멀리 뛰기
효진이는 멀리 뛰기를 연습하고 있습니다. 효진이는 한번에 1칸, 또는 2칸을 뛸 수 있습니다. 칸이 총 4개 있을 때, 효진이는
(1칸, 1칸, 1칸, 1칸)
(1칸, 2칸, 1칸)
(1칸, 1칸, 2칸)
(2칸, 1칸, 1칸)
(2칸, 2칸)
의 5가지 방법으로 맨 끝 칸에 도달할 수 있습니다.
멀리뛰기에 사용될 칸의 수 n이 주어질 때, 효진이가 끝에 도달하는 방법이 몇 가지인지 알아내, 여기에 1234567를 나눈 나머지를 리턴하는 함수, solution을 완성하세요. 예를 들어 4가 입력된다면, 5를 return하면 됩니다.

/**
 * My code
 * @author Bellhyuk
 * @date '21.03.22.
 * 
 * <의사코드>
//순서 상관있음
//1칸 또는 2칸만 뛰기 가능
//숫자가 int를 넘을 예정이므로 long 사용
//  %1234567을 한 값을 구하자.
//칸 1개 - 1
//칸 2개 - 2
//칸 3개 - 3
//칸 4개 - 5
//앞에 두 개 더한 값이 다음 값, 피보나치수열
//-> 동적프로그래밍
 */
class Solution {
  public int solution(int n) {
      int[] dp = new int[2001];
      dp[0] = 1;
      dp[1] = 1;
      for(int i=2; i<=n; i++){
          dp[i] = (dp[i-1] + dp[i-2])%1234567;
      }
      return dp[n];
  }
/*
 * <다른 사람 풀이>
 * brown의 가로길이를 먼저 정하고 두번째 조건과 같을 때까지 반복문을 돌려주는 방식 사용
 */
  /*public int[] solution(int brown, int yellow) {

    }*/
}
